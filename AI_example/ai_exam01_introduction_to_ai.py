# -*- coding: utf-8 -*-
"""AI_exam01_Introduction_to_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c-fWXa8eIb8JOszu1EK-57kDbsKqfexL

# AI 입문!!!!!!!!!!

기존의 프로그램 방식...
"""

def celsius_to_fahrenheit(celsius):
  return celsius * 1.8 + 32

celsius_value = int(input('섭씨 온도를 입력하세요.\n'))
print('화씨 온도는 %0.2f도입니다.' % celsius_to_fahrenheit(celsius_value))

"""AI 방식..."""

from keras.models import Sequential
from keras.layers import Dense, InputLayer
import numpy as np
import matplotlib.pyplot as plt

data_C = np.array(range(100))
data_F = celsius_to_fahrenheit(data_C)
print(data_C)
print(data_F)

model = Sequential()
model.add(InputLayer(input_shape=(1,)))
model.add(Dense(1))
model.compile(loss='mse', optimizer='sgd')
model.summary()

model.save('before_learning.h5')

#데이터 전처리하기
scaled_data_C = data_C / 100
scaled_data_F = data_F / 100
print(scaled_data_C)
print(scaled_data_F)

print(model.predict(np.array([0.01])))

fit_hist = model.fit(scaled_data_C, scaled_data_F, epochs=1000)

print(model.predict(np.array([0.01])))

model.save('after_learning.h5')

plt.plot(fit_hist.history['loss'])
plt.show()

"""잡음이 있는 현실 데이터"""

noise = np.array(np.random.normal(0, 0.05, 100)) # 평균 0, 표준편차 0.05인 random값 100개 생성하기
print(noise)

noised_scaled_data_F = np.array([])
for data in scaled_data_F:
  noised_scaled_data_F = np.append(
      noised_scaled_data_F, np.random.normal(0, 0.05, 100) + data
  )

print(noised_scaled_data_F)
print(len(noised_scaled_data_F))

noised_scaled_data_C = []
for data in scaled_data_C:
  for i in range(100):
    noised_scaled_data_C.append(data)

noised_scaled_data_C = np.array(noised_scaled_data_C)
print(noised_scaled_data_C)
print(len(noised_scaled_data_C))

plt.scatter(x=noised_scaled_data_C, y=noised_scaled_data_F) #산점도 그리기

fig = plt.figure(figsize=(20,20))
ax = fig.add_subplot(111)
ax.scatter(x=noised_scaled_data_C, y=noised_scaled_data_F, alpha=0.2, s=200, marker='+')
plt.show()

model2 = Sequential()
model2.add(InputLayer(input_shape=(1,)))
model2.add(Dense(1))
model2.compile(loss='mse', optimizer='rmsprop')
model2.summary()

print(model2.predict(np.array([0.01])))

fit_hist = model2.fit(noised_scaled_data_C, noised_scaled_data_F, epochs=20)

print(model2.predict(np.array([0.01])))

model2.save('noised_learning.h5')

plt.plot(fit_hist.history['loss'])
plt.show()

celsius_value = int(input('섭씨온도를 입력하세요.\n'))
print('화씨온도는 %0.2f도입니다.' %(model.predict(np.array([celsius_value/100]))*100))

celsius_value = int(input('섭씨온도를 입력하세요.\n'))
print('화씨온도는 %0.2f도입니다.' %(model2.predict(np.array([celsius_value/100]))*100))