# -*- coding: utf-8 -*-
"""AI_exam07_classification_fashion_mnist_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fE8KLm-b3IktjYe5fN-pu7-bNUq8EABk

fashion mnist 분류 모델 만들기~~
이번에는 CNN을 사용한다!
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.datasets import fashion_mnist
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras.utils import to_categorical

(X_train, Y_train), (X_test, Y_test) = fashion_mnist.load_data()
print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

my_sample = np.random.randint(0, 60000)
print(Y_train[my_sample])
plt.imshow(X_train[my_sample], cmap='gray')
plt.show()
print(X_train[my_sample])

label = ['T-shirt', 'trouser', 'pullover', 'dress', 'coat',
         'sandal', 'shirt', 'sneaker', 'bag', 'ankle boot']

"""데이터 전처리!!"""

# One Hot Encoding
y_train = to_categorical(Y_train)
y_test = to_categorical(Y_test)

print(Y_train[5000])
print(y_train[5000])

x_train = X_train.reshape(60000, 28, 28, 1) # 2차원 데이터 크기 설정, color는 1로
x_test = X_test.reshape(10000, 28, 28, 1)
print(x_train[5000])

# Scaling (Min-Max Scaling)
x_train = x_train / 255
x_test = x_test /255
print(x_train.shape)
print(x_train[5000])

"""CNN 모델 만들기!!!"""

model = Sequential()
model.add(Conv2D(32, input_shape=(28, 28, 1), activation='relu', kernel_size=(3, 3), padding='same')) # 컨볼루션 레이어 (출력이 32장)
model.add(MaxPooling2D(pool_size=(2, 2), padding='same')) # 풀링 레이어
model.add(Conv2D(32, input_shape=(28, 28, 1), activation='relu', kernel_size=(3, 3), padding='same'))
model.add(MaxPooling2D(pool_size=(2, 2), padding='same'))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

fit_hist = model.fit(x_train, y_train, epochs=15, batch_size=128, validation_split=0.2)

score = model.evaluate(x_test, y_test)
print('Final test set accuracy', score[1])

plt.plot(fit_hist.history['loss'], label='Training Loss')
plt.plot(fit_hist.history['val_loss'], label='Validation Loss')
plt.legend()
plt.show()

plt.plot(fit_hist.history['accuracy'], label='Training Accuracy')
plt.plot(fit_hist.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.show()

"""예측!!!!"""

my_sample = np.random.randint(0, 10000)
print(Y_test[my_sample], label[Y_test[my_sample]])
pred = model.predict(x_test[my_sample].reshape(1, 28, 28, 1))
print(np.argmax(pred), label[np.argmax(pred)])
print(pred)
plt.imshow(X_test[my_sample], cmap='gray')
plt.show()

