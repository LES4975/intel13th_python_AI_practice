# -*- coding: utf-8 -*-
"""AI_exam06_iris_classfication.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ot9A01jhv1lSP28P9SC40r1V_AeTSeXF

분류 실습!!!!!
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

iris = load_iris()
print(type(iris))
print(iris.keys())

print(iris.data)

print(iris.data.shape)

print(iris.feature_names)

print(iris.target)

print(iris.target.shape)

print(iris.target_names)

# 데이터프레임으로 변환하기
iris_dataframe = pd.DataFrame(iris.data, columns=iris.feature_names)
iris_dataframe.head()

pd.plotting.scatter_matrix(iris_dataframe, c=iris.target, figsize=(6, 6), s=60, marker='0')
plt.show()

"""데이터셋 전처리!!!"""

x = iris.data
y = iris.target.reshape(-1, 1) # reshape하면 각 데이터를 한 개씩 묶을 수 있다.
print(x.shape)
print(y.shape)
print(y)

# One-Hot Encoding
from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder(sparse_output=False) # sparse_output으로 희소행렬 표현 방식을 설정할 수 있다
encoded_y = encoder.fit_transform(y)
print(encoded_y.shape)

print(encoded_y)

# 데이터셋 분리
X_train, X_test, y_train, y_test = train_test_split(x, encoded_y, test_size=0.2)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

"""모델 만들기!!!!!!!"""

model = Sequential()
model.add(Dense(10, input_shape=(4,), activation='relu'))
model.add(Dense(10, activation='relu'))
model.add(Dense(3, activation='softmax'))
model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['binary_accuracy'])

# 모델 학습
fit_hist = model.fit(X_train, y_train, epochs=100, batch_size=10, verbose=1)

# 모델 검증
score = model.evaluate(X_test, y_test, verbose=2)
print(score)

plt.plot(fit_hist.history['binary_accuracy'])
plt.show()

